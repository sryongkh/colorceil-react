{
  "version": 3,
  "sources": ["../../node_modules/toolcool-range-slider/src/core/templates/main.html.js", "../../node_modules/toolcool-range-slider/src/core/enums/attributes-enum.ts", "../../node_modules/toolcool-range-slider/src/core/enums/type-enum.ts", "../../node_modules/toolcool-range-slider/src/core/domain/math-provider.ts", "../../node_modules/toolcool-range-slider/src/core/domain/events-provider.ts", "../../node_modules/toolcool-range-slider/src/core/ui/pointer.ts", "../../node_modules/toolcool-range-slider/src/core/dal/data-provider.ts", "../../node_modules/toolcool-range-slider/src/core/ui/panel-fill.ts", "../../node_modules/toolcool-range-slider/src/core/enums/css-vars-enum.ts", "../../node_modules/toolcool-range-slider/src/core/domain/common-provider.ts", "../../node_modules/toolcool-range-slider/src/core/ui/styles.ts", "../../node_modules/toolcool-range-slider/src/core/enums/css-classes-enum.ts", "../../node_modules/toolcool-range-slider/src/core/plugins/plugins-manager.ts", "../../node_modules/toolcool-range-slider/src/core/domain/pointers-provider.ts", "../../node_modules/toolcool-range-slider/src/core/ui/slider.ts", "../../node_modules/toolcool-range-slider/src/core/domain/attributes-provider.ts", "../../node_modules/toolcool-range-slider/src/core/app/range-slider.ts", "../../node_modules/toolcool-range-slider/src/core/index.ts"],
  "sourcesContent": ["export default (styles, linkHrefs) => { return ` ${ linkHrefs && linkHrefs.length > 0 ? linkHrefs.map(linkHref => `<link rel=\"stylesheet\" href=\"${ linkHref }\" />`).join('') : '' } <style> ${styles} </style> <div class=\"range-slider-box\"> <div class=\"row\"> <div id=\"range-slider\" class=\"range-slider\"> <div class=\"container\"> <div class=\"panel\"></div> <div class=\"panel-fill\"></div> <div class=\"container\"> <div class=\"pointer\" tabindex=\"0\" role=\"slider\"> <div class=\"pointer-shape\"></div> </div> </div> </div> </div> </div> </div>`; }; ", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const PointersOverlap = 'pointers-overlap';\nexport const PointersMinDistance = 'pointers-min-distance';\nexport const PointersMaxDistance = 'pointers-max-distance';\nexport const RangeDragging = 'range-dragging';\n\nexport const Data = 'data';\nexport const Min = 'min';\nexport const Max = 'max';\nexport const Step = 'step';\nexport const Round = 'round';\nexport const Type = 'type';\nexport const Theme = 'theme';\nexport const RightToLeft = 'rtl';\nexport const BottomToTop = 'btt';\n\nexport const Disabled = 'disabled';\nexport const KeyboardDisabled = 'keyboard-disabled';\nexport const MousewheelDisabled = 'mousewheel-disabled';\n\nexport const SliderWidth = 'slider-width';\nexport const SliderHeight = 'slider-height';\nexport const SliderRadius = 'slider-radius';\n\nexport const SliderBg = 'slider-bg';\nexport const SliderBgHover = 'slider-bg-hover';\nexport const SliderBgFill = 'slider-bg-fill';\n\nexport const PointerWidth = 'pointer-width';\nexport const PointerHeight = 'pointer-height';\nexport const PointerRadius = 'pointer-radius';\nexport const PointerBg = 'pointer-bg';\nexport const PointerBgHover = 'pointer-bg-hover';\nexport const PointerBgFocus = 'pointer-bg-focus';\nexport const PointerShadow = 'pointer-shadow';\nexport const PointerShadowHover = 'pointer-shadow-hover';\nexport const PointerShadowFocus = 'pointer-shadow-focus';\nexport const PointerBorder = 'pointer-border';\nexport const PointerBorderHover = 'pointer-border-hover';\nexport const PointerBorderFocus = 'pointer-border-focus';\n\nexport const AnimateOnClick = 'animate-onclick';\nexport const CSSLinks = 'css-links';\n", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const Vertical = 'vertical';\nexport const Horizontal = 'horizontal';\n", "/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { getNumber, isNumber } from './math-provider';\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\ninterface IIndexable<T = any> { [key: string]: T }\n\nexport const sendPointerClickedEvent = ($component: HTMLElement, $pointer: HTMLElement) => {\n  $component.dispatchEvent(\n    new CustomEvent('onPointerClicked', {\n      detail: {\n        $pointer: $pointer,\n      },\n    })\n  );\n};\n\nexport const sendMouseDownEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendMouseUpEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseUp', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendOnKeyDownEvent = ($component: HTMLElement, evt: KeyboardEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onKeyDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendChangeEvent = (\n  $component: HTMLElement,\n  values: (string | number | undefined)[],\n) => {\n\n  if(!values || values.length <= 0) return;\n\n  const transformed = values.map(value => isNumber(value) ? getNumber(value, value) : value);\n\n  const detail: IIndexable = {\n    values: transformed || [],\n  };\n\n  detail.value = transformed[0];\n  detail.value0 = transformed[0];\n  detail.value1 = transformed[0];\n\n  for(let i=1; i<transformed.length; i++){\n    detail[`value${ i + 1 }`] = transformed[i];\n  }\n\n  $component.dispatchEvent(\n    new CustomEvent('change', {\n      detail,\n    })\n  );\n};", "import * as TypeEnum from '../enums/type-enum';\nimport { sendOnKeyDownEvent, sendPointerClickedEvent } from '../domain/events-provider';\n\nexport interface IPointer {\n  readonly percent: number;\n  readonly $pointer: HTMLElement;\n\n  updatePosition: (percent: number, leftWall: number | undefined, rightWall: number | undefined, type: string, rightToLeft: boolean, bottomToTop: boolean) => boolean;\n\n  disabled: boolean;\n\n  isClicked: ($target: HTMLElement) => boolean;\n  setCallbacks: (\n    arrowLeft: (pointerIndex: number) => void,\n    arrowRight: (pointerIndex: number) => void,\n    arrowUp: (pointerIndex: number) => void,\n    arrowDown: (pointerIndex: number) => void\n  ) => void;\n\n  setAttr: (key: string, value: string | null | undefined) => void;\n  getAttr: (key: string) => string | null;\n\n  destroy: () => void;\n}\n\nexport const Pointer = ($component: HTMLElement, $pointer: HTMLElement, index: number) : IPointer => {\n\n  // the pointer value in % in the range [0, 100] -\n  // used to render the pointer position\n  let percent = 0;\n\n  let arrowLeft: (pointerIndex: number) => void;\n  let arrowRight: (pointerIndex: number) => void;\n  let arrowUp: (pointerIndex: number) => void;\n  let arrowDown: (pointerIndex: number) => void;\n\n  let disabled = false;\n\n  // -------------- APIs -------------------------\n\n  /**\n   * Update pointer position according to its percent (value).\n   * Returns true if change position has changed.\n   */\n  const updatePosition = (\n      _percent: number,\n      _leftWall: number | undefined,\n      _rightWall: number | undefined,\n      _type: string,\n      _rightToLeft: boolean,\n      _bottomToTop: boolean): boolean => {\n\n    const oldValue = percent;\n\n    if(_rightWall !== undefined && _percent > _rightWall){\n      _percent = _rightWall;\n    }\n\n    if(_leftWall !== undefined && _percent < _leftWall){\n      _percent = _leftWall;\n    }\n\n    percent = _percent;\n    // $pointer.focus();\n\n    // the below code should not change the global pointer percent,\n    // only its position on the panel\n    let percentPos = percent;\n    if((_type === TypeEnum.Vertical && _bottomToTop) ||\n      (_type === TypeEnum.Horizontal && _rightToLeft)) {\n      percentPos = 100 - percentPos;\n    }\n\n    if (_type === TypeEnum.Vertical) {\n      $pointer.style.top = `${ percentPos }%`;\n    }\n    else {\n      $pointer.style.left = `${ percentPos }%`;\n    }\n\n    return oldValue !== percent;\n  };\n\n  const isClicked = ($target: HTMLElement) => {\n    return $target === $pointer || $pointer.contains($target);\n  };\n\n  const setCallbacks = (\n    _arrowLeft: (pointerIndex: number) => void,\n    _arrowRight: (pointerIndex: number) => void,\n    _arrowUp: (pointerIndex: number) => void,\n    _arrowDown: (pointerIndex: number) => void\n  ) => {\n    arrowLeft = _arrowLeft;\n    arrowRight = _arrowRight;\n    arrowUp = _arrowUp;\n    arrowDown = _arrowDown;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $pointer.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $pointer.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($pointer.hasAttribute('aria-disabled')) {\n        $pointer.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setAttr = (key: string, value: string | null | undefined) => {\n    if(value === null || value === undefined){\n      $pointer.removeAttribute(key);\n    }\n    else{\n      $pointer.setAttribute(key, value);\n    }\n  };\n\n  const getAttr = (key: string) => {\n    return $pointer.getAttribute(key);\n  };\n\n  // -------------- Events ------------------------\n\n  const pointerKeyDown = (evt: KeyboardEvent) => {\n    if(disabled) return;\n\n    switch (evt.key) {\n      case 'ArrowLeft': {\n        evt.preventDefault();\n        if(typeof arrowLeft === 'function'){\n          arrowLeft(index);\n        }\n        break;\n      }\n\n      case 'ArrowRight': {\n        evt.preventDefault();\n        if(typeof arrowRight === 'function'){\n          arrowRight(index);\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        evt.preventDefault();\n        if(typeof arrowUp === 'function'){\n          arrowUp(index);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        evt.preventDefault();\n        if(typeof arrowDown === 'function'){\n          arrowDown(index);\n        }\n        break;\n      }\n    }\n\n    sendOnKeyDownEvent($component, evt);\n  };\n\n  const pointerClicked = () => {\n    if(disabled) return;\n    sendPointerClickedEvent($component, $pointer);\n  };\n\n  // ---------- Lifecycle ------------------------\n\n  (() => {\n    $pointer.className = `pointer pointer-${ index }`;\n\n    $pointer.addEventListener('keydown', pointerKeyDown);\n    $pointer.addEventListener('click', pointerClicked);\n  })();\n\n  const destroy = () => {\n    $pointer.removeEventListener('keydown', pointerKeyDown);\n    $pointer.removeEventListener('click', pointerClicked);\n    $pointer.remove();\n  };\n\n  return {\n    $pointer,\n\n    get percent() {\n      return percent;\n    },\n\n    get disabled() {\n      return disabled;\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    updatePosition,\n\n    isClicked,\n    setCallbacks,\n    setAttr,\n    getAttr,\n\n    destroy,\n  };\n};\n\n", "import { isNumber } from '../domain/math-provider';\n\nexport const parseData = (dataString: string | undefined | null): (string | number)[] | undefined => {\n  if (dataString === undefined || dataString === null) return undefined;\n\n  if(Array.isArray(dataString)) return dataString as (string | number)[];\n\n  const result = dataString.trim();\n  if (result === '') return undefined;\n\n  const parts = dataString.split(',');\n  const list: string[] = [];\n  let allValuesAreNumbers = true;\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i].trim();\n    if (part === '') continue;\n\n    list.push(part);\n\n    if (!isNumber(part)) {\n      allValuesAreNumbers = false;\n    }\n  }\n\n  if (!allValuesAreNumbers) return list;\n\n  return list.map((item) => Number(item));\n};\n\nexport const findValueIndexInData = (val: string | number, data: (string | number)[] | undefined) => {\n  return data ? data.findIndex((item) => item === val || item.toString().trim() === val.toString().trim()) : -1;\n};", "import * as TypeEnum from '../enums/type-enum';\n\nexport interface IPanelFill {\n  updatePosition: (type: string, percents: (number | undefined)[], rightToLeft: boolean, bottomToTop: boolean) => void;\n}\n\nexport const PanelFill = ($fill: HTMLElement) : IPanelFill => {\n\n  const updatePosition = (type: string, percents: (number | undefined)[], rightToLeft: boolean, bottomToTop: boolean) => {\n\n    if(percents.length <= 0) return;\n\n    const oneOnly = percents.length === 1;\n    const first = percents[0] as number;\n    const last = percents[percents.length - 1] as number;\n\n    if (type === TypeEnum.Vertical) {\n      $fill.style.removeProperty('width');\n      $fill.style.removeProperty('right');\n      $fill.style.removeProperty('left');\n\n      if (!oneOnly) {\n        $fill.style.height = `${Math.abs(first - last)}%`;\n      }\n      else{\n        $fill.style.height = `${ first }%`;\n      }\n\n      if (bottomToTop) {\n        $fill.style.bottom = '0%';\n\n        if (!oneOnly) {\n          $fill.style.top = `${Math.min(100 - last, 100 - first)}%`;\n        }\n        else{\n          $fill.style.top = 'auto';\n        }\n      }\n      else {\n        $fill.style.bottom = 'auto';\n\n        if (!oneOnly) {\n          $fill.style.top = `${Math.min(first, last)}%`;\n        }\n        else{\n          $fill.style.top = '0%';\n        }\n      }\n    }\n    else {\n      $fill.style.removeProperty('height');\n      $fill.style.removeProperty('top');\n      $fill.style.removeProperty('bottom');\n\n      if (!oneOnly) {\n        $fill.style.width = `${ Math.abs(first - last) }%`;\n      }\n      else{\n        $fill.style.width = `${ first }%`;\n      }\n\n      if (rightToLeft) {\n        $fill.style.right = '0%';\n\n        if (!oneOnly) {\n          $fill.style.left = `${ Math.min(100 - last, 100 - first) }%`;\n        }\n        else{\n          $fill.style.left = 'auto';\n        }\n      }\n      else {\n        $fill.style.right = 'auto';\n\n        if (!oneOnly) {\n          $fill.style.left = `${ Math.min(first, last) }%`;\n        }\n        else{\n          $fill.style.left = '0%';\n        }\n      }\n    }\n  };\n\n  return {\n    updatePosition,\n  };\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const AnimateOnClick = '--animate-onclick';\nexport const SliderWidth = '--width';\nexport const SliderHeight = '--height';\nexport const SliderRadius = '--panel-bg-border-radius';\n\nexport const SliderBg = '--panel-bg';\nexport const SliderBgHover = '--panel-bg-hover';\nexport const SliderBgFill = '--panel-bg-fill';\n\nexport const PointerWidth = '--pointer-width';\nexport const PointerHeight = '--pointer-height';\nexport const PointerRadius = '--pointer-border-radius';\nexport const PointerBg = '--pointer-bg';\nexport const PointerBgHover = '--pointer-bg-hover';\nexport const PointerBgFocus = '--pointer-bg-focus';\nexport const PointerShadow = '--pointer-shadow';\nexport const PointerShadowHover = '--pointer-shadow-hover';\nexport const PointerShadowFocus = '--pointer-shadow-focus';\nexport const PointerBorder = '--pointer-border';\nexport const PointerBorderHover = '--pointer-border-hover';\nexport const PointerBorderFocus = '--pointer-border-focus';\n", "import * as AttributesEnum from '../enums/attributes-enum';\nimport { getNumber } from './math-provider';\n\nexport const getAttributesByRegex = <T>($component: HTMLElement, regex: RegExp, parseValue?: (val: string) => T) : Map<number, T> => {\n\n  const map = new Map<number, T>();\n\n  for (const attr of $component.attributes) {\n    const valueProp = attr.nodeName.trim().toLowerCase();\n    const isValue = regex.test(valueProp);\n    if(!isValue) continue;\n\n    const key = valueProp.replace(/\\D/g, '').trim();\n    const keyNum = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n    const value = parseValue && typeof parseValue === 'function' ? parseValue(attr.value) : attr.value;\n    map.set(keyNum, value as T);\n  }\n\n  return map;\n};\n\nexport const getExternalCSSList = ($component: HTMLElement) => {\n  if(!$component) return null;\n\n  const str = $component.getAttribute(AttributesEnum.CSSLinks);\n  if(!str) return null;\n\n  const parts = str.split(';');\n  const cssList: string[] = [];\n\n  for(const part of parts){\n    if(part.trim() === '') continue;\n    cssList.push(part.trim());\n  }\n\n  return cssList;\n};", "import * as AttributesEnum from '../enums/attributes-enum';\nimport * as CSSVariables from '../enums/css-vars-enum';\nimport { IPointer } from './pointer';\nimport { getAttributesByRegex } from '../domain/common-provider';\n\nexport interface IStyles {\n\n  setStyle: (key: string, value: string | null | undefined, index: number) => void;\n  getStyle: (key: string, index: number) => string | undefined;\n\n  theme: string | null;\n  readonly pointerShapes: (string | null)[];\n  setPointerShape: (index: number, value: string | null) => void;\n}\n\nexport const stylePropertiesList: [string, string, string, RegExp | null][] = [\n  [CSSVariables.SliderWidth, AttributesEnum.SliderWidth, 'sliderWidth', null],\n  [CSSVariables.SliderHeight, AttributesEnum.SliderHeight, 'sliderHeight', null],\n  [CSSVariables.SliderRadius, AttributesEnum.SliderRadius, 'sliderRadius', null],\n\n  [CSSVariables.SliderBg, AttributesEnum.SliderBg, 'sliderBg', null],\n  [CSSVariables.SliderBgHover, AttributesEnum.SliderBgHover, 'sliderBgHover', null],\n  [CSSVariables.SliderBgFill, AttributesEnum.SliderBgFill, 'sliderBgFill', null],\n\n  [CSSVariables.PointerWidth, AttributesEnum.PointerWidth, 'pointer#Width', /^pointer([0-9]*)-width$/], // pointer-width, pointer2-width, ...\n  [CSSVariables.PointerHeight, AttributesEnum.PointerHeight, 'pointer#Height', /^pointer([0-9]*)-height$/], // pointer-height$, pointer2-height, ...\n  [CSSVariables.PointerRadius, AttributesEnum.PointerRadius, 'pointer#Radius', /^pointer([0-9]*)-radius$/], // pointer-radius, pointer2-radius, ...\n  [CSSVariables.PointerBg, AttributesEnum.PointerBg, 'pointer#Bg', /^pointer([0-9]*)-bg$/], // pointer-bg, pointer2-bg, ...\n  [CSSVariables.PointerBgHover, AttributesEnum.PointerBgHover, 'pointer#BgHover', /^pointer([0-9]*)-bg-hover$/], // pointer-bg-hover, pointer2-bg-hover, ...\n  [CSSVariables.PointerBgFocus, AttributesEnum.PointerBgFocus, 'pointer#BgFocus', /^pointer([0-9]*)-bg-focus$/], // pointer-bg-focus, pointer2-bg-focus, ...\n  [CSSVariables.PointerShadow, AttributesEnum.PointerShadow, 'pointer#Shadow', /^pointer([0-9]*)-shadow$/], // pointer-shadow, pointer2-shadow, ...\n  [CSSVariables.PointerShadowHover, AttributesEnum.PointerShadowHover, 'pointer#ShadowHover', /^pointer([0-9]*)-shadow-hover$/], // pointer-shadow-hover, pointer2-shadow-hover, ...\n  [CSSVariables.PointerShadowFocus, AttributesEnum.PointerShadowFocus, 'pointer#ShadowFocus', /^pointer([0-9]*)-shadow-focus$/], // pointer-shadow-focus, pointer2-shadow-focus, .\n  [CSSVariables.PointerBorder, AttributesEnum.PointerBorder, 'pointer#Border', /^pointer([0-9]*)-border$/], // pointer-border, pointer2-border, ...\n  [CSSVariables.PointerBorderHover, AttributesEnum.PointerBorderHover, 'pointer#BorderHover', /^pointer([0-9]*)-border-hover$/], // pointer-border-hover, pointer2-border-hover, ...\n  [CSSVariables.PointerBorderFocus, AttributesEnum.PointerBorderFocus, 'pointer#BorderFocus', /^pointer([0-9]*)-border-focus$/], // pointer-border-focus, pointer2-border-focus, ...\n];\n\nexport const Styles = ($component: HTMLElement, $slider: HTMLElement, pointers: IPointer[]) : IStyles => {\n\n  let theme: string | null = null;\n  const pointerShapes: (string | null)[] = [];\n  const stylesMap: Map<string, string> = new Map();\n\n  // ----- SETTERS ---------------------------\n\n  const removeClassesStartWith = (prefix: string, $element = $slider) => {\n    const classList = [...$element.classList];\n    for(const className of classList){\n      if(className.startsWith(prefix)){\n        $slider.classList.remove(className);\n      }\n    }\n  };\n\n  const removeClasses = () => {\n    // remove shape classes from $slider\n    removeClassesStartWith('shape');\n\n    // remove shape classes from pointers (if there are any)\n    const $pointers = $slider.querySelectorAll('.pointer');\n    for(const $pointer of $pointers){\n      removeClassesStartWith('shape', $pointer as HTMLElement);\n    }\n  };\n\n  const setTheme = (val: string | null) => {\n    theme = val;\n    removeClassesStartWith('theme-');\n\n    if(typeof val === 'string'){\n      $slider.classList.add(`theme-${ val }`);\n    }\n  };\n\n  const updatePointerShapes = () => {\n    removeClasses();\n\n    if(pointerShapes.length <= 0) return;\n\n    // first shape is added to the slider, as it should be applied on all pointers (potentially)\n    $slider.classList.add('shape', `shape-${ pointerShapes[0] }`);\n\n    // other shapes should be added to the relevant pointers each;\n    for(let i=1; i<pointerShapes.length; i++){\n      const item = pointerShapes[i];\n      if(!item) continue;\n\n      const $pointer = $slider.querySelector(`.pointer-${ i }`);\n      if(!$pointer) continue;\n\n      $pointer.classList.add('shape', `shape-${ item }`);\n    }\n  };\n\n  const setPointerShape = (index: number, value: string) => {\n    pointerShapes[index] = value;\n    updatePointerShapes();\n  };\n\n  const setPointerShapes = () => {\n\n    removeClasses();\n\n    // pointer-shape, pointer2-shape, ...\n    const list = getAttributesByRegex($component, /^pointer([0-9]*)-shape$/);\n    if(list.size <= 0) return;\n\n    // save shapes to the list that can be used for the getter APIs later\n    for(const item of list){\n      const index = item[0] as number;\n      pointerShapes[index] = item[1] as string;\n    }\n\n    updatePointerShapes();\n  };\n\n  const getKey = (key: string, index: number) => {\n    return `${ key }-${ index }`;\n  };\n\n  const setStyle = (key: string, value: string | null | undefined, index: number) => {\n\n    const pointer = pointers[index];\n    if(!pointer) return;\n\n    const $styleHolder = index === 0 ? $slider : pointer.$pointer;\n\n    if(value === null || value === undefined){\n      if(stylesMap.has(getKey(key, index))){\n        stylesMap.delete(getKey(key, index));\n      }\n      $styleHolder.style.removeProperty(key);\n      return;\n    }\n\n    stylesMap.set(getKey(key, index), value);\n    $styleHolder.style.setProperty(key, value);\n  };\n\n  const getStyle = (key: string, index: number) => {\n    return stylesMap.get(getKey(key, index));\n  };\n\n  // ---- initialization ---------------------\n  (() => {\n\n    for(const item of stylePropertiesList){\n\n      // '--pointer-width', 'pointer-width', 'pointerWidth', regex or null\n      const [cssVariableName, attrName, apiProperty, regex] = item;\n\n      // apply the styles via CSS variables;\n      // if index = 0 ---> apply the style on the whole slider, so all\n      // pointers will inherit it;\n      // otherwise, apply styles on the individual pointers;\n      if(regex){\n        const list = getAttributesByRegex($component, regex);\n        for(const item of list){\n          const index = item[0];\n          const value = item[1] as string;\n          setStyle(cssVariableName, value, index);\n        }\n      }\n      else{\n        const cssVariableValue = $component.getAttribute(attrName);\n        setStyle(cssVariableName, cssVariableValue, 0);\n      }\n\n      // add APIs --------------------------\n      const apiProperties: [string, number][] = [];\n\n      if(apiProperty.indexOf('#') === -1){\n        apiProperties.push([apiProperty, 0]);\n      }\n      else{\n        apiProperties.push([apiProperty.replace('#', ''), 0]);\n        apiProperties.push([apiProperty.replace('#', '0'), 0]);\n        apiProperties.push([apiProperty.replace('#', '1'), 0]);\n        for(let i=1; i<pointers.length; i++){\n          apiProperties.push([apiProperty.replace('#', (i + 1).toString()), i]);\n        }\n      }\n\n      for(const item of apiProperties){\n        try{\n          const propName = item[0];\n          const index = item[1];\n\n          if(!Object.prototype.hasOwnProperty.call($component, propName)){\n            Object.defineProperty($component, propName, {\n              get () {\n                return getStyle(cssVariableName, index);\n              },\n\n              set: (val) => {\n                setStyle(cssVariableName, val, index);\n              },\n            });\n          }\n        }\n        catch (ex){\n          console.error(ex);\n        }\n      }\n    }\n\n    setTheme($component.getAttribute(AttributesEnum.Theme));\n    setPointerShapes();\n  })();\n\n  return {\n    setStyle,\n    getStyle,\n\n    get theme() {\n      return theme;\n    },\n\n    set theme(val){\n      setTheme(val);\n    },\n\n    get pointerShapes() {\n      return pointerShapes;\n    },\n\n    setPointerShape,\n  };\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const AnimateOnClick = 'animate-on-click';\nexport const RangeDragging = 'range-dragging';\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from './interfaces';\n\ndeclare global {\n  interface Window {\n    tcRangeSliderPlugins: (() => IPlugin)[];\n    tcRangeSliderObservedAttr: string[];\n  }\n}\n\nexport interface IPluginsManager {\n  init: () => void;\n\n  update: (data: IPluginUpdateData) => void;\n\n  onAttrChange: (attrName: string, newValue: string) =>  void;\n\n  destroy: () => void;\n}\n\nexport const PluginsManager = (\n  $component: HTMLElement,\n  requestUpdatePlugins: () => void,\n  setters: IPluginSetters,\n  getters: IPluginGetters,\n) : IPluginsManager => {\n\n  const plugins: IPlugin[] = [];\n\n  // ------ APIs ----------------------------\n\n  const update = (data: IPluginUpdateData) => {\n    for(const plugin of plugins){\n      if(plugin.update && typeof plugin.update === 'function'){\n        plugin.update(data);\n      }\n    }\n  };\n\n  const destroy = () => {\n    for(const plugin of plugins){\n      if(plugin.destroy && typeof plugin.destroy === 'function'){\n        plugin.destroy();\n      }\n    }\n  };\n\n  const onAttrChange = (_attrName: string, _newValue: string) => {\n    for(const plugin of plugins){\n      if(plugin.onAttrChange && typeof plugin.onAttrChange === 'function'){\n        plugin.onAttrChange(\n          _attrName,\n          _newValue\n        );\n      }\n    }\n  };\n\n  const defineSettersGetters = (plugin: IPlugin) => {\n    if(!plugin.gettersAndSetters) return;\n\n    for(const item of plugin.gettersAndSetters){\n      if(!item.name || !item.attributes) continue;\n\n      try{\n        if(!Object.prototype.hasOwnProperty.call($component, item.name)){\n          Object.defineProperty($component, item.name, item.attributes);\n        }\n      }\n      catch (ex){\n        console.error('defineSettersGetters error:', ex);\n      }\n    }\n  };\n\n  const initStyles = (plugin: IPlugin) => {\n    if(!plugin.css) return;\n\n    const $style = $component.shadowRoot?.querySelector('style');\n    if(!$style) return;\n\n    $style.innerHTML += plugin.css;\n  };\n\n  // ------ initialization ------------------\n  const init = () => {\n    if(!window.tcRangeSliderPlugins) return;\n\n    for(const pluginFunc of window.tcRangeSliderPlugins){\n      const plugin = pluginFunc();\n      plugins.push(plugin);\n\n      if(plugin.init && typeof plugin.init === 'function'){\n\n        // call plugin initialization function\n        plugin.init(\n          $component,\n          requestUpdatePlugins,\n          setters,\n          getters,\n        );\n\n        // if plugin has getters and setters that used for APIs ---> define them\n        defineSettersGetters(plugin);\n\n        // if plugin has css rules defined as plain text ---> they can be added dynamically\n        initStyles(plugin);\n      }\n    }\n  };\n\n  return {\n    init,\n    update,\n    onAttrChange,\n    destroy,\n  };\n};", "import { getNumber, isNumber } from './math-provider';\nimport { IPointer, Pointer } from '../ui/pointer';\nimport { ISlider } from '../ui/slider';\n\nexport const MAX_VALUES_API = 10;\n\nexport const initPointers = ($component: HTMLElement, $pointer: HTMLElement) => {\n  const map = new Map<number, number | string>();\n  const regex = /^value([0-9]*)$/;\n\n  // collect data about key / value pairs: value=50, value2=70, etc.\n  // value = value0 = value1 (all these are aliases of each other)\n  for (const attr of $component.attributes) {\n    const valueProp = attr.nodeName.trim().toLowerCase();\n    const isValue = regex.test(valueProp);\n    if(!isValue) continue;\n\n    const key = valueProp.replace('value', '').trim();\n    const keyNum = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n    const value = isNumber(attr.value) ? getNumber(attr.value, 0) : attr.value;\n\n    map.set(keyNum, value);\n  }\n\n  // find the max value number in the map\n  const max = Math.max(...Array.from(map.keys()));\n  const pointers: [IPointer, string | number | undefined][] = [];\n\n  // first pointer always exists\n  pointers.push([Pointer($component, $pointer, 0), map.get(0)]);\n\n  // add all other pointers\n  let $latestPointer = $pointer;\n\n  for(let i=1; i<=max; i++){\n    const $newPointer = $pointer.cloneNode(true) as HTMLElement;\n    $latestPointer.after($newPointer);\n\n    $latestPointer = $newPointer;\n    pointers.push([Pointer($component, $newPointer, i), map.get(i)]);\n  }\n\n  return pointers;\n};\n\nexport const initPointerAPI = (\n  $component: HTMLElement,\n  slider: ISlider,\n  index: number,\n  valueProp: string,\n  ariaLabelProp: string,\n  pointerShapeProp: string,\n  pointerDisabledProp: string\n) => {\n\n  try{\n\n    // `value${ index + 1 }`: value, value0, value1, value2, etc.\n    Object.defineProperty($component, valueProp, {\n      configurable: true,\n      get () {\n        if(!slider) return undefined;\n\n        const pointer = slider.pointers[index];\n        if(!pointer) return undefined;\n\n        const val = slider.getTextValue(pointer.percent);\n        return isNumber(val) ? getNumber(val, val) : val;\n      },\n\n      set: (val) => {\n        const pointer = slider.pointers[index];\n        if(!pointer){\n          slider?.addPointer(val);\n        }\n        else{\n          slider?.setValue(val, index);\n        }\n      },\n    });\n\n    // `ariaLabel${ index + 1 }`\n    Object.defineProperty($component, ariaLabelProp, {\n      configurable: true,\n      get () {\n        return slider?.pointers[index]?.getAttr('aria-label') ?? undefined;\n      },\n\n      set: (val) => {\n        if(!slider) return;\n        slider.setAriaLabel(index, val);\n      },\n    });\n\n    // `pointerShape${ index + 1 }`\n    Object.defineProperty($component, pointerShapeProp, {\n      configurable: true,\n      get () {\n        return slider?.styles?.pointerShapes[index] ?? null;\n      },\n\n      set: (val) => {\n        if(!slider || !slider.styles) return;\n        slider.styles.setPointerShape(index, val);\n      },\n    });\n\n    // `pointer${ index + 1 }Disabled`\n    Object.defineProperty($component, pointerDisabledProp, {\n      configurable: true,\n      get () {\n        return slider?.pointers[index].disabled ?? false;\n      },\n\n      set: (val) => {\n        if(!slider) return;\n\n        const pointer = slider?.pointers[index];\n        if(!pointer) return;\n\n        pointer.disabled = val;\n      },\n    });\n  }\n  catch (ex){\n    console.error(ex);\n  }\n};\n\nexport const initPointerAPIs = ($component: HTMLElement, slider: ISlider) => {\n\n  const apiProperties: [string, string, string, string, number][] = [\n    ['value', 'ariaLabel', 'pointerShape', 'pointerDisabled', 0],\n    ['value0', 'ariaLabel0', 'pointerShape0', 'pointer0Disabled', 0],\n    ['value1', 'ariaLabel1', 'pointerShape1', 'pointer1Disabled', 0],\n  ];\n\n  // The maximum number of such pointers is determined by the MAX_VALUES_API API constant (for performance reasons).\n  // https://github.com/mzusin/toolcool-range-slider/issues/2\n  for(let i=2; i<MAX_VALUES_API; i++){\n    apiProperties.push([`value${ i }`, `ariaLabel${ i }`, `pointer${ i }Shape`, `pointer${ i }Disabled`, i - 1]);\n  }\n\n  for(const item of apiProperties){\n    initPointerAPI($component,\n      slider,\n      item[4],\n      item[0],\n      item[1],\n      item[2],\n      item[3]\n    );\n  }\n\n};\n\n\nexport const changePointersOrder = (pointers: IPointer[], isDesc: boolean, $component: HTMLElement) => {\n\n  const $container = $component.shadowRoot?.querySelector('.container') as HTMLElement\n  if(!$container) return;\n\n  for(const pointer of pointers){\n    if(isDesc){\n      $container.prepend(pointer.$pointer);\n    }\n    else{\n      $container.append(pointer.$pointer);\n    }\n  }\n};\n", "import { IPointer, Pointer } from './pointer';\nimport { convertRange, getBoolean, getNumber, isNumber, roundToStep, setDecimalPlaces } from '../domain/math-provider';\nimport * as AttributesEnum from '../enums/attributes-enum';\nimport { TData, TStep } from '../types';\nimport { findValueIndexInData, parseData } from '../dal/data-provider';\nimport * as TypeEnum from '../enums/type-enum';\nimport { IPanelFill, PanelFill } from './panel-fill';\nimport { sendChangeEvent, sendMouseDownEvent, sendMouseUpEvent } from '../domain/events-provider';\nimport { IStyles, Styles } from './styles';\nimport * as CSSVariables from '../enums/css-vars-enum';\nimport * as CssClasses from '../enums/css-classes-enum';\nimport { getAttributesByRegex } from '../domain/common-provider';\nimport { IPluginsManager, PluginsManager } from '../plugins/plugins-manager';\nimport { changePointersOrder } from '../domain/pointers-provider';\n\nexport interface ISlider {\n  readonly pointers: IPointer[];\n  readonly styles: IStyles | null;\n  readonly pluginsManager: IPluginsManager | null;\n\n  pointersOverlap: boolean;\n  pointersMinDistance: number;\n  pointersMaxDistance: number;\n  rangeDragging: boolean;\n\n  readonly min: number | string;\n  readonly max: number | string;\n  readonly step: TStep;\n  readonly data: TData;\n\n  type: string;\n  rightToLeft: boolean;\n  bottomToTop: boolean;\n  disabled: boolean;\n  keyboardDisabled: boolean;\n  mousewheelDisabled: boolean;\n  round: number;\n  animateOnClick: string | undefined | boolean;\n\n  getAriaLabel: (index: number) => (string | undefined);\n  setAriaLabel: (index: number, ariaLabel: string | undefined) => void;\n\n  setMin: (value: number | string | undefined | null) => void;\n  setMax: (value: number | string | undefined | null) => void;\n  setValue: (value: number | string | undefined | null, index: number) => void;\n  setStep: (value: TStep | string) => void;\n  setData: (value: TData | string | null | number) => void;\n  getTextValue: (_percent: number | undefined) => undefined | string | number;\n\n  addPointer: (value: number | string | undefined | null) => number;\n  removePointer: () => number;\n\n  destroy: () => void;\n}\n\nexport const MIN_DEFAULT = 0;\nexport const MAX_DEFAULT = 100;\nexport const ROUND_DEFAULT = 2;\nexport const ANIMATE_ON_CLICK_DEFAULT = '0.3s';\n\nexport const Slider = ($component: HTMLElement, $slider: HTMLElement, pointersList: [IPointer, string | number | undefined][]) : ISlider => {\n\n  const pointers = pointersList.map(item => item[0]);\n  let selectedPointer: IPointer | null | undefined = null;\n  let panelFill: IPanelFill | null = null;\n  let styles: IStyles | null = null;\n  let pluginsManager: IPluginsManager | null = null;\n\n  let min = MIN_DEFAULT;\n  let max = MAX_DEFAULT;\n  let step: TStep = undefined; // step is defined in absolute units (not percent!)\n  let data: TData = undefined;\n  let type: string = TypeEnum.Horizontal;\n  let round: number = ROUND_DEFAULT;\n  let rightToLeft = false;\n  let bottomToTop = false;\n\n  let pointersOverlap = false;\n  let pointersMinDistance = 0;\n  let pointersMaxDistance = Infinity;\n\n  let rangeDragging = false;\n\n  let rangeDraggingStart: number | undefined = undefined;\n  let rangeDraggingDiff: number | undefined = undefined;\n\n  let disabled = false;\n  let keyboardDisabled = false;\n  let mousewheelDisabled = false;\n  let animateOnClick: string | undefined = ANIMATE_ON_CLICK_DEFAULT;\n\n  const ariaLabels: (string | undefined)[] = [];\n\n  // -------------- EVENTS --------------------\n\n  const onMouseDown = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    }\n\n    onValueChange(evt);\n\n    window.addEventListener('mousemove', onValueChange);\n    window.addEventListener('mouseup', onMouseUp);\n\n    sendMouseDownEvent($component, evt);\n  };\n\n  const onMouseUp = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    rangeDraggingStart = undefined;\n    rangeDraggingDiff = undefined;\n\n    window.removeEventListener('mousemove', onValueChange);\n    window.removeEventListener('mouseup', onMouseUp);\n\n    if(animateOnClick){\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n\n    sendMouseUpEvent($component, evt);\n  };\n\n  const getActivePointer = ($target: HTMLElement, percent: number) => {\n    if(pointers.length <= 0) return;\n\n    // if only 1 pointer exists --> return it\n    if(pointers.length === 1){\n      if(pointers[0].isClicked($target) && animateOnClick){\n        $slider.classList.remove(CssClasses.AnimateOnClick);\n      }\n\n      return pointers[0];\n    }\n\n    const panelFillClicked = isPanelFillClicked($target);\n\n    if(rangeDragging){\n\n      let _dragPercent = percent;\n      const stepPercent = getStepPercent(_dragPercent);\n      if(stepPercent !== undefined){\n        _dragPercent = roundToStep(_dragPercent, stepPercent);\n      }\n\n      if(panelFillClicked){\n        rangeDraggingStart = _dragPercent;\n        rangeDraggingDiff = 0;\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n      }\n      else{\n        if(rangeDraggingStart !== undefined){\n          rangeDraggingDiff = _dragPercent - rangeDraggingStart;\n          rangeDraggingStart = _dragPercent;\n        }\n      }\n    }\n\n    if(!isPanelClicked($target) && !panelFillClicked){\n      // if clicked directly on 1 of the pointers ---> return it\n      for(const pointer of pointers){\n        if(!pointer.isClicked($target) || pointer.disabled) continue;\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n\n        return pointer;\n      }\n\n      // if already selected pointer ---> return it\n      for(const pointer of pointers){\n        if(selectedPointer === pointer) return pointer;\n      }\n    }\n\n    // find the closest pointer and return it\n    let minDistance = Infinity;\n    let minDistancePointer = null;\n\n    for(const pointer of pointers){\n      if(pointer.disabled) continue;\n\n      const distance = Math.abs(percent - pointer.percent);\n      if(distance < minDistance){\n        minDistance = distance;\n        minDistancePointer = pointer;\n      }\n    }\n\n    return minDistancePointer;\n  };\n\n  const getSelectedPointerIndex = () => {\n    return pointers.findIndex(pointer => selectedPointer === pointer && !pointer.disabled);\n  };\n\n  const onValueChange = (evt: MouseEvent | TouchEvent) => {\n\n    // find the percent [0, 100] of the current mouse position in vertical or horizontal slider\n    let percent;\n\n    if(type === TypeEnum.Vertical){\n      const { height: boxHeight, top: boxTop } = $slider.getBoundingClientRect();\n      const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n      const top = Math.min(Math.max(0, mouseY - boxTop), boxHeight);\n      percent = (top * 100) / boxHeight;\n    }\n    else{\n      const { width: boxWidth, left: boxLeft } = $slider.getBoundingClientRect();\n      const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n      const left = Math.min(Math.max(0, mouseX - boxLeft), boxWidth);\n      percent = (left * 100) / boxWidth;\n    }\n\n    if(rightToLeft || bottomToTop){\n      percent = 100 - percent;\n    }\n\n    selectedPointer = getActivePointer(evt.target as HTMLElement, percent);\n\n    // handle range dragging\n    if(rangeDragging && pointers.length > 1 && rangeDraggingDiff !== undefined){\n\n      const firstPointer = pointers[0];\n      const lastPointer = pointers[pointers.length - 1];\n\n      const firstSmallerThanMin = firstPointer.percent + rangeDraggingDiff < 0;\n      const lastGreaterThanMax = lastPointer.percent + rangeDraggingDiff > 100;\n      if(firstSmallerThanMin || lastGreaterThanMax) return;\n\n      for(let i=0; i<pointers.length; i++){\n        setPositions(i, pointers[i].percent + rangeDraggingDiff);\n      }\n\n      return;\n    }\n\n    const foundIndex = getSelectedPointerIndex();\n\n    if(foundIndex !== -1){\n      setPositions(foundIndex, percent);\n      selectedPointer?.$pointer.focus();\n    }\n  };\n\n  const pointerMouseWheel = (evt: WheelEvent) => {\n    if (disabled ||\n      document.activeElement !== $component ||\n      selectedPointer?.disabled) return;\n\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const scrollTop = evt.deltaY < 0;\n    const rightOrBottom = rightToLeft || bottomToTop;\n    const shouldGoPrev = scrollTop ? !rightOrBottom : rightOrBottom;\n\n    const foundIndex = getSelectedPointerIndex();\n    if(foundIndex === -1) return;\n\n    if(shouldGoPrev){\n      goPrev(foundIndex, pointers[foundIndex].percent);\n    }\n    else{\n      goNext(foundIndex, pointers[foundIndex].percent);\n    }\n  };\n\n  // -------------- Arrows --------------------\n\n  const arrowLeft = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go backwards\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n  };\n\n  const arrowRight = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go backward\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n  };\n\n  const arrowUp = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go forwards\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go backwards\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n  };\n\n  const arrowDown = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go backward\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n  };\n\n  // -------------- Helpers ------------------------\n\n  const isPanelClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel');\n  };\n\n  const isPanelFillClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel-fill');\n  };\n\n  const goPrev = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    let stepPercent = getStepPercent(_percent);\n\n    if(stepPercent == undefined){\n      stepPercent = 1;\n    }\n\n    _percent -= stepPercent;\n\n    if(_percent < 0){\n      _percent = 0;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const goNext = (index: number, _percent: number | undefined) => {\n\n    if(_percent === undefined) return;\n\n    let stepPercent = getStepPercent(_percent);\n\n    if(stepPercent == undefined){\n      stepPercent = 1;\n    }\n\n    _percent += stepPercent;\n\n    if(_percent > 100){\n      _percent = 100;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const updatePlugins = () => {\n\n    if(!pluginsManager) return;\n    pluginsManager.update({\n      percents: getPercents(),\n      values: getValues(),\n      $pointers: getPointerElements(),\n\n      min: getNumericMin(),\n      max: getNumericMax(),\n\n      data: getData(),\n      step: getStep(),\n      round: getRound(),\n      type: getType(),\n\n      textMin: getMin(),\n      textMax: getMax(),\n\n      rightToLeft: isRightToLeft(),\n      bottomToTop: isBottomToTop(),\n\n      pointersOverlap: isPointersOverlap(),\n      pointersMinDistance: getPointersMinDistance(),\n      pointersMaxDistance: getPointersMaxDistance(),\n      rangeDragging: isRangeDraggingEnabled(),\n\n      disabled: isDisabled(),\n      keyboardDisabled: isKeyboardDisabled(),\n      mousewheelDisabled: isMousewheelDisabled(),\n    });\n  };\n\n  const requestUpdatePlugins = () => {\n    updatePlugins();\n  };\n\n  // -------------- Getters --------------------\n\n  const getPointerLeftWall = (pointerIndex: number) => {\n    if(pointersOverlap || pointers.length <= 1 || max === min) return undefined;\n\n    if(pointerIndex === 0){\n      // by default 0, but if min distance between pointers is defined --->\n      // then the distance to the next pointer\n      const converted = pointersMaxDistance * 100 / (max - min);\n      return Math.max(0, pointers[pointerIndex + 1].percent - converted);\n    }\n    else{\n      // by default previous pointer, but if min distance between pointers is defined --->\n      // then the distance to the next pointer\n      const converted = pointersMinDistance * 100 / (max - min);\n      return Math.min(pointers[pointerIndex - 1].percent + converted, 100);\n    }\n  };\n\n  const getPointerRightWall = (pointerIndex: number) => {\n    if(pointersOverlap || pointers.length <= 1 || max === min) return undefined;\n\n    if(pointerIndex === pointers.length - 1){\n      // by default 100, but if min distance between pointers is defined --->\n      // then the distance to the previous pointer\n      const converted = pointersMaxDistance * 100 / (max - min);\n      return Math.min(pointers[pointerIndex - 1].percent + converted, 100);\n    }\n    else{\n      // distance to the next pointer\n      const converted = pointersMinDistance * 100 / (max - min);\n      return Math.max(0, pointers[pointerIndex + 1].percent - converted);\n    }\n  };\n\n  /**\n   * user step is defined in absolute values;\n   * this function return it as %\n   */\n  const getStepPercent = (_percent: number) => {\n\n    let _step: number | undefined | null;\n\n    if(typeof step === 'function'){\n      // convert percent to value: [0, 100] to [min, max]\n      const currentValue = convertRange(0, 100, min, max, _percent);\n\n      // the slider function provided by user should return an absolute value, not %\n      _step = step(currentValue, _percent);\n    }\n    else{\n      // the step value provided by the user should be absolute value (not %), undefined, or null\n      _step = step;\n    }\n\n    // round percent to step\n    if(isNumber(_step)){\n\n      /*\n      min ......... max (step = 1)\n      0 ........... 100 (step = ?)\n\n      (max - min) ....... step (=1)\n      100 ............... ?\n\n      ? = 100 * step / (max - min)\n      */\n\n      const diff = max - min;\n      _step = diff === 0 ? 0 :  (_step as number) * 100 / diff;\n\n      return _step;\n    }\n\n    return undefined;\n  };\n\n  const getTextValue = (_percent: number | undefined) => {\n    if(_percent === undefined) return undefined;\n\n    const val = convertRange(0, 100, min, max, _percent);\n\n    if(data !== undefined){\n      return data[Math.round(val)];\n    }\n\n    return setDecimalPlaces(val, round);\n  };\n\n  const getMin = () => {\n\n    if(data !== undefined){\n      return data[min];\n    }\n\n    return min;\n  };\n\n  const getMax = () => {\n\n    if(data !== undefined){\n      return data[max];\n    }\n\n    return max;\n  };\n\n  const getStep = () => {\n    return step;\n  };\n\n  const getPointerMin = (index: number) => {\n    if(index <= 0 || pointersOverlap) return getMin();\n    return getTextValue(pointers[index - 1].percent) ?? '';\n  };\n\n  const getPointerMax = (index: number) => {\n    if(pointers.length <= 1 ||\n      index >= pointers.length - 1 ||\n      pointersOverlap) return getMax();\n\n    return getTextValue(pointers[index + 1].percent) ?? '';\n  };\n\n  const getPercents = () => {\n    return pointers.map(pointer => pointer.percent);\n  };\n\n  const getValues = () => {\n    return pointers.map(pointer => getTextValue(pointer.percent));\n  }\n\n  const getPointerElements = () => {\n    return pointers.map(pointer => pointer.$pointer);\n  };\n\n  const getNumericMin = () => {\n    return min;\n  };\n\n  const getNumericMax = () => {\n    return max;\n  };\n\n  const getData = () => {\n    return data;\n  };\n\n  const getType = () => {\n    return type;\n  };\n\n  const getRound = () => {\n    return round;\n  };\n\n  const getPointersMinDistance = () => {\n    return pointersMinDistance;\n  };\n\n  const getPointersMaxDistance = () => {\n    return pointersMaxDistance;\n  };\n\n  const getAriaLabel = (index: number) => {\n    return ariaLabels[index];\n  };\n\n  const isRightToLeft = () => {\n    return rightToLeft;\n  };\n\n  const isBottomToTop = () => {\n    return bottomToTop;\n  };\n\n  const isDisabled = () => {\n    return disabled;\n  };\n\n  const isKeyboardDisabled = () => {\n    return keyboardDisabled;\n  };\n\n  const isMousewheelDisabled = () => {\n    return mousewheelDisabled;\n  };\n\n  const isPointersOverlap = () => {\n    return pointersOverlap;\n  };\n\n  const isRangeDraggingEnabled = () => {\n    return rangeDragging;\n  };\n\n  // -------------- Setters --------------------\n\n  const setPositions = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    // round percent to step\n    const stepPercent = getStepPercent(_percent);\n\n    if(stepPercent !== undefined){\n      _percent = roundToStep(_percent, stepPercent);\n    }\n\n    const pointer = pointers[index];\n    if(!pointer) return;\n\n    const percentChanged = pointer.updatePosition(_percent, getPointerLeftWall(index), getPointerRightWall(index), type, rightToLeft, bottomToTop);\n    panelFill?.updatePosition(type, pointers.map(pointer => pointer.percent), rightToLeft, bottomToTop);\n\n    updatePlugins();\n\n    for(const pointer of pointers){\n      const valueText = getTextValue(pointer.percent);\n      if(valueText !== undefined){\n        pointer.setAttr('aria-valuenow', valueText.toString());\n        pointer.setAttr('aria-valuetext', valueText.toString());\n      }\n    }\n\n    setAriaMinMax();\n\n    if(percentChanged){\n      sendChangeEvent($component, pointers.map(pointer => getTextValue(pointer.percent)));\n    }\n  };\n\n  const setAllPositions = () => {\n    for(let i=0; i<pointers.length; i++){\n      setPositions(i, pointers[i].percent);\n    }\n  };\n\n  /**\n   * on component init, min and max should be initialized together\n   * because their validations depend on each other;\n   */\n  const setMinMax = (_min: number | string | undefined | null, _max: number | string | undefined | null) => {\n\n    min = data !== undefined ? 0 : getNumber(_min, MIN_DEFAULT);\n    max = data !== undefined ? data.length - 1 : getNumber(_max, MAX_DEFAULT);\n\n    // perform validations\n    setMin(min);\n    setMax(max);\n  };\n\n  const setAriaMinMax = () => {\n    for(let i=0; i<pointers.length; i++){\n      const pointer = pointers[i];\n      pointer.setAttr('aria-valuemin', (getPointerMin(i) ?? '').toString());\n      pointer.setAttr('aria-valuemax', (getPointerMax(i) ?? '').toString());\n    }\n  };\n\n  const setMin = (_min: number | string | undefined | null) => {\n    min = getNumber(_min, MIN_DEFAULT);\n\n    if(min > max){\n      max = min + MAX_DEFAULT;\n    }\n\n    setAllPositions();\n  };\n\n  const setMax = (_max: number | string | undefined | null) => {\n\n    max = getNumber(_max, MAX_DEFAULT);\n\n    if(max < min){\n      max = min + MAX_DEFAULT;\n    }\n\n    setAllPositions();\n  };\n\n  const setValues = (values: (number | string | undefined)[]) => {\n\n    // initial values should be initialized together\n    // because their validations may depend on each other;\n\n    // init initial values with pointers overlap ----------\n    pointersOverlap = true;\n\n    for(let i=0; i<values.length; i++){\n      setValue(values[i], i);\n    }\n\n    pointersOverlap = false;\n\n    // add all required validations ------------------------\n    for(let i=0; i<values.length; i++){\n      setValue(values[i], i);\n    }\n  };\n\n  const setValue = (_val: number | string | undefined | null, index: number) => {\n\n    let val: number;\n\n    if(data !== undefined){\n\n      val = (_val === undefined || _val === null) ? 0 : findValueIndexInData(_val, data);\n      if(val === -1){\n        val = 0;\n      }\n    }\n    else{\n      val = getNumber(_val, min);\n\n      if(val < min){\n        val = min;\n      }\n\n      if(val > max){\n        val = max;\n      }\n    }\n\n    // scale a range [min,max] to [a,b]\n    const percent = convertRange(min, max, 0, 100, val);\n\n    setPositions(index, percent);\n  };\n\n  const setStep = (_step: TStep | string) => {\n    if(_step === null || _step === undefined){\n      step = undefined;\n      return;\n    }\n\n    if (typeof _step === 'function') {\n      step = _step;\n      setAllPositions();\n      return;\n    }\n\n    if(isNumber(_step)){\n      step = getNumber(_step, 1);\n\n      const diff = Math.abs(max - min);\n      if (step > diff) {\n        step = undefined;\n      }\n\n      setAllPositions();\n      return;\n    }\n\n    step = undefined;\n  };\n\n  const setPointersOverlap = (_pointersOverlap: boolean) => {\n    pointersOverlap = _pointersOverlap;\n    setAllPositions();\n  };\n\n  const setPointersMinDistance = (_pointersMinDistance: number) => {\n    if(!isNumber(_pointersMinDistance) || _pointersMinDistance < 0){\n      _pointersMinDistance = 0;\n    }\n    pointersMinDistance = _pointersMinDistance;\n  };\n\n  const setPointersMaxDistance = (_pointersMaxDistance: number) => {\n    if(!isNumber(_pointersMaxDistance) || _pointersMaxDistance < 0){\n      _pointersMaxDistance = Infinity;\n    }\n    pointersMaxDistance = _pointersMaxDistance;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $slider.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $slider.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($slider.hasAttribute('aria-disabled')) {\n        $slider.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setKeyboardDisabled = (_disabled: boolean) => {\n    keyboardDisabled = _disabled;\n  };\n\n  const setMousewheelDisabled = (_disabled: boolean) => {\n    mousewheelDisabled = _disabled;\n\n    if(mousewheelDisabled){\n      document.removeEventListener('wheel', pointerMouseWheel);\n    }\n    else{\n      document.addEventListener('wheel', pointerMouseWheel, { passive: false });\n    }\n  };\n\n  const setData = (_data: TData | string | number | null) => {\n\n    if(_data === null || _data === undefined){\n      data = undefined;\n      return;\n    }\n\n    data = parseData(_data as string);\n    if(data === undefined || data.length <= 0){\n      data = undefined;\n      return;\n    }\n\n    setMin(0);\n    setMax(data.length - 1);\n\n    if(step === undefined){\n      setStep(1);\n    }\n  };\n\n  const setType = (_type: string | null | undefined) => {\n\n    if(typeof _type === 'string'){\n      type = _type.trim().toLowerCase() === TypeEnum.Vertical ? TypeEnum.Vertical : TypeEnum.Horizontal;\n    }\n    else{\n      type = TypeEnum.Horizontal;\n    }\n\n    const $box = $component.shadowRoot?.querySelector('.range-slider-box');\n    if(!$box) return;\n    $box.className = `range-slider-box type-${ type }`;\n\n    setAllPositions();\n\n    // update accessibility properties\n    const aria = type === TypeEnum.Vertical ? 'vertical' : 'horizontal';\n    for(const pointer of pointers){\n      pointer.setAttr('aria-orientation', aria);\n    }\n  };\n\n  const setRightToLeft = (_rightToLeft: boolean) => {\n    rightToLeft = _rightToLeft;\n\n    if(pointers.length > 1){\n      changePointersOrder(pointers, rightToLeft, $component);\n    }\n\n    setAllPositions();\n    updatePlugins();\n  };\n\n  const setBottomToTop = (_bottomToTop: boolean) => {\n    bottomToTop = _bottomToTop;\n\n    if(pointers.length > 1){\n      changePointersOrder(pointers, bottomToTop, $component);\n    }\n\n    setAllPositions();\n    updatePlugins();\n  };\n\n  const setRound = (_round: number) => {\n    round = getNumber(_round, ROUND_DEFAULT);\n\n    if(round < 0){\n      round = ROUND_DEFAULT;\n    }\n\n    updatePlugins();\n  };\n\n  const setAnimateOnClick = (_animateOnClick: string | boolean | null | undefined) => {\n    if(_animateOnClick === null ||\n      _animateOnClick === undefined ||\n      _animateOnClick.toString().trim().toLowerCase() === 'false'){\n      animateOnClick = undefined;\n      $slider.style.removeProperty(CSSVariables.AnimateOnClick);\n      $slider.classList.remove(CssClasses.AnimateOnClick);\n    }\n    else{\n      animateOnClick = _animateOnClick.toString();\n      $slider.style.setProperty(CSSVariables.AnimateOnClick, animateOnClick);\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n  };\n\n  const setAriaLabel = (index: number, _ariaLabel: string | undefined) => {\n\n    const pointer = pointers[index];\n    if(!pointer) return;\n\n    pointer.setAttr('aria-label', _ariaLabel);\n    ariaLabels[index] = _ariaLabel;\n  };\n\n  const setRangeDragging = (_rangeDragging: boolean) => {\n    rangeDraggingStart = undefined;\n\n    if(pointers.length <= 1){\n      rangeDragging = false;\n      $slider.classList.remove(CssClasses.RangeDragging);\n      return;\n    }\n\n    rangeDragging = _rangeDragging;\n    $slider.classList.toggle(CssClasses.RangeDragging, rangeDragging);\n  };\n\n  // initialization -------------------------------------\n\n  const initDisabled = () => {\n    setDisabled(getBoolean($component.getAttribute(AttributesEnum.Disabled)));\n    keyboardDisabled = getBoolean($component.getAttribute(AttributesEnum.KeyboardDisabled));\n    mousewheelDisabled = getBoolean($component.getAttribute(AttributesEnum.MousewheelDisabled));\n\n    // handle 'pointer1-disabled, pointer2-disabled, etc.\n    const disabledList = getAttributesByRegex($component, /^pointer([0-9]*)-disabled$/, (val: string) => {\n      return getBoolean(val);\n    });\n\n    for(const item of disabledList){\n      const pointerIndex = item[0];\n      if(!pointers[pointerIndex]) continue;\n      pointers[pointerIndex].disabled = item[1];\n    }\n  };\n\n  const initAriaLabels = () => {\n    // handle 'aria-label1', 'aria-label2', etc.\n    const ariaLabelsList = getAttributesByRegex($component, /^aria-label([0-9]*)$/);\n\n    for(const item of ariaLabelsList){\n      const index = item[0];\n      setAriaLabel(index, item[1] as string);\n    }\n  };\n\n  // add pointer - always to the end\n  const addPointer = (value: string | number | undefined) => {\n    const len = pointers.length;\n    const $latestPointer = pointers[len - 1].$pointer;\n\n    const $newPointer = $latestPointer.cloneNode(true) as HTMLElement;\n    $latestPointer.after($newPointer);\n    const newPointer = Pointer($component, $newPointer, len);\n\n    newPointer.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    pointers.push(newPointer);\n\n    setValue(value, len);\n    setAllPositions();\n    updatePlugins();\n\n    return len;\n  };\n\n  // always from the end\n  const removePointer = () => {\n    const len = pointers.length;\n    const pointer = pointers[len - 1];\n    if(!pointer) return -1;\n\n    pointer.destroy();\n    pointers.pop();\n\n    if(pointers.length <= 1){\n      setRangeDragging(false);\n    }\n\n    setAllPositions();\n    updatePlugins();\n\n    return len - 1;\n  };\n\n  (() => {\n\n    // init pointer callbacks for arrow keys\n    for(const pointer of pointers){\n      pointer.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    }\n\n    // init panel fill\n    const $fill = $component.shadowRoot?.querySelector('.panel-fill') as HTMLElement;\n    if($fill){\n      panelFill = PanelFill($fill);\n    }\n\n    // init main properties from HTML attributes\n    setType($component.getAttribute(AttributesEnum.Type));\n    setRightToLeft(getBoolean($component.getAttribute(AttributesEnum.RightToLeft)));\n    setBottomToTop(getBoolean($component.getAttribute(AttributesEnum.BottomToTop)));\n\n    setMinMax($component.getAttribute(AttributesEnum.Min), $component.getAttribute(AttributesEnum.Max));\n    setStep($component.getAttribute(AttributesEnum.Step));\n    setData($component.getAttribute(AttributesEnum.Data));\n\n    // set value and render the pointers ----------------------\n    setValues(pointersList.map(item => item[1]));\n\n    // overlaps MUST be defined after the pointer values\n    setPointersOverlap(getBoolean($component.getAttribute(AttributesEnum.PointersOverlap)));\n    setPointersMinDistance(getNumber($component.getAttribute(AttributesEnum.PointersMinDistance), 0));\n    setPointersMaxDistance(getNumber($component.getAttribute(AttributesEnum.PointersMaxDistance), Infinity));\n    setRangeDragging(getBoolean($component.getAttribute(AttributesEnum.RangeDragging)));\n\n    // additional properties -----------------------------\n    setRound(getNumber($component.getAttribute(AttributesEnum.Round), ROUND_DEFAULT));\n    initDisabled();\n    initAriaLabels();\n\n    // init styles ---------\n    styles = Styles($component, $slider, pointers);\n    setAnimateOnClick($component.getAttribute(AttributesEnum.AnimateOnClick) ?? ANIMATE_ON_CLICK_DEFAULT);\n\n    // init slider events -------------------------------------\n    $slider.addEventListener('mousedown', onMouseDown);\n    $slider.addEventListener('mouseup', onMouseUp);\n    $slider.addEventListener('touchmove', onValueChange);\n    $slider.addEventListener('touchstart', onValueChange);\n\n    if(!mousewheelDisabled){\n      document.addEventListener('wheel', pointerMouseWheel, { passive: false });\n    }\n\n    // init plugins ---------------\n    pluginsManager = PluginsManager(\n      $component,\n      requestUpdatePlugins,\n      {\n        setValues,\n        setMin,\n        setMax,\n        setStep,\n        setPointersOverlap,\n        setPointersMinDistance,\n        setPointersMaxDistance,\n        setDisabled,\n        setType,\n        setRightToLeft,\n        setBottomToTop,\n        setRound,\n        setKeyboardDisabled,\n        setMousewheelDisabled,\n        setRangeDragging,\n        setData,\n      },\n      {\n        getPercents,\n        getValues,\n        getPointerElements,\n\n        getMin: getNumericMin,\n        getMax: getNumericMax,\n\n        getStep,\n        getData,\n        getType,\n        getRound,\n\n        getTextMin: getMin,\n        getTextMax: getMax,\n\n        isRightToLeft,\n        isBottomToTop,\n\n        isDisabled,\n        isKeyboardDisabled,\n        isMousewheelDisabled,\n\n        isPointersOverlap,\n        isRangeDraggingEnabled,\n        getPointersMinDistance,\n        getPointersMaxDistance,\n      }\n    );\n    pluginsManager.init();\n  })();\n\n  const destroy = () => {\n    $slider.removeEventListener('mousedown', onMouseDown);\n    $slider.removeEventListener('mouseup', onMouseUp);\n    $slider.removeEventListener('touchmove', onValueChange);\n    $slider.removeEventListener('touchstart', onValueChange);\n    document.removeEventListener('wheel', pointerMouseWheel);\n\n    for(const pointer of pointers){\n      pointer.destroy();\n    }\n\n    pluginsManager?.destroy();\n  };\n\n  return {\n    get pointers() {\n      return pointers;\n    },\n\n    get styles() {\n      return styles;\n    },\n\n    get pluginsManager() {\n      return pluginsManager;\n    },\n\n    get min() {\n      return getMin();\n    },\n\n    get max() {\n      return getMax();\n    },\n\n    get step() {\n      return getStep();\n    },\n\n    get pointersOverlap() {\n      return isPointersOverlap();\n    },\n\n    set pointersOverlap(_pointersOverlap) {\n      setPointersOverlap(_pointersOverlap);\n    },\n\n    get pointersMinDistance() {\n      return getPointersMinDistance();\n    },\n\n    set pointersMinDistance(_pointersMinDistance) {\n      setPointersMinDistance(_pointersMinDistance);\n    },\n\n    get pointersMaxDistance() {\n      return getPointersMaxDistance();\n    },\n\n    set pointersMaxDistance(_pointersMaxDistance) {\n      setPointersMaxDistance(_pointersMaxDistance);\n    },\n\n    get disabled() {\n      return isDisabled();\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    get data() {\n      return getData();\n    },\n\n    get type() {\n      return getType();\n    },\n\n    set type(_type) {\n      setType(_type);\n    },\n\n    get rightToLeft() {\n      return isRightToLeft();\n    },\n\n    set rightToLeft(_rightToLeft) {\n      setRightToLeft(_rightToLeft);\n    },\n\n    get bottomToTop() {\n      return isBottomToTop();\n    },\n\n    set bottomToTop(_bottomToTop) {\n      setBottomToTop(_bottomToTop);\n    },\n\n    get round() {\n      return getRound();\n    },\n\n    set round(_round) {\n      setRound(_round);\n    },\n\n    get animateOnClick() {\n      return animateOnClick;\n    },\n\n    set animateOnClick(_animateOnClick) {\n      setAnimateOnClick(_animateOnClick);\n    },\n\n    get keyboardDisabled() {\n      return isKeyboardDisabled();\n    },\n\n    set keyboardDisabled(_keyboardDisabled){\n      setKeyboardDisabled(_keyboardDisabled);\n    },\n\n    get mousewheelDisabled() {\n      return isMousewheelDisabled();\n    },\n\n    set mousewheelDisabled(_mousewheelDisabled){\n      setMousewheelDisabled(_mousewheelDisabled);\n    },\n\n    get rangeDragging() {\n      return isRangeDraggingEnabled();\n    },\n\n    set rangeDragging(_rangeDragging) {\n      setRangeDragging(_rangeDragging);\n    },\n\n    setMin,\n    setMax,\n    setValue,\n    setStep,\n    setData,\n    getTextValue,\n    setAriaLabel,\n    getAriaLabel,\n\n    addPointer,\n    removePointer,\n\n    destroy,\n  };\n};\n\n", "import * as AttributesEnum from '../enums/attributes-enum';\nimport { ISlider, ROUND_DEFAULT } from '../ui/slider';\nimport { getBoolean, getNumber } from './math-provider';\nimport { stylePropertiesList } from '../ui/styles';\n\nexport const onAttributeChange = (slider: ISlider, attrName: string, newValue: string) => {\n\n  // handle style properties ------------------------------------\n  // try to get style property - ['--pointer-width', 'pointer-width', 1, 'pointerWidth']\n  const found = stylePropertiesList.find(([_cssVariableName, _attrName, _apiProperty, _regex]) => {\n    return _attrName.replace('#', '') === attrName.replace(/\\d+/g, '');\n  });\n\n  if(found && slider.styles){\n    const [_cssVariableName, _attrName, _apiProperty, _regex] = found;\n\n    const key = attrName.replace(/\\D/g, '').trim();\n    const index = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n\n    slider.styles.setStyle(_cssVariableName, newValue, index);\n    return;\n  }\n\n  if(slider && slider.pluginsManager){\n    slider.pluginsManager.onAttrChange(attrName, newValue);\n  }\n\n  // handle static properties ----------------------------------\n  switch (attrName) {\n\n    case AttributesEnum.Min: {\n      slider.setMin(newValue);\n      break;\n    }\n\n    case AttributesEnum.Max: {\n      slider.setMax(newValue);\n      break;\n    }\n\n    case AttributesEnum.Step: {\n      slider.setStep(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersOverlap: {\n      slider.pointersOverlap = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMinDistance: {\n      slider.pointersMinDistance = getNumber(newValue, 0);\n      break;\n    }\n\n    case AttributesEnum.RangeDragging: {\n      slider.rangeDragging = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMaxDistance: {\n      slider.pointersMaxDistance = getNumber(newValue, Infinity);\n      break;\n    }\n\n    case AttributesEnum.Disabled: {\n      slider.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.KeyboardDisabled: {\n      slider.keyboardDisabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.MousewheelDisabled: {\n      slider.mousewheelDisabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Data: {\n      slider.setData(newValue);\n      break;\n    }\n\n    case AttributesEnum.Type: {\n      slider.type = newValue;\n      break;\n    }\n\n    case AttributesEnum.RightToLeft: {\n      slider.rightToLeft = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.BottomToTop: {\n      slider.bottomToTop = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Round: {\n      slider.round = getNumber(newValue, ROUND_DEFAULT);\n      break;\n    }\n\n    case AttributesEnum.Theme: {\n      if(slider.styles){\n        slider.styles.theme = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.AnimateOnClick: {\n      slider.animateOnClick = newValue;\n      break;\n    }\n  }\n\n  // handle dynamic properties ------------------------------------\n  let property: string | null = null;\n\n  if(/^value([0-9]*)$/.test(attrName)){\n    property = 'value';\n  }\n\n  if(/^pointer([0-9]*)-disabled$/.test(attrName)){\n    property = 'pointer-disabled';\n  }\n\n  if(/^aria-label([0-9]*)$/.test(attrName)){\n    property = 'aria-label';\n  }\n\n  if(/^pointer([0-9]*)-shape$/.test(attrName)){\n    property = 'pointer-shape';\n  }\n\n  if(!property) return;\n\n  const key = attrName.replace(/\\D/g, '').trim();\n  const index = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1)\n\n  switch (property) {\n\n    case 'value': {\n      slider.setValue(newValue, index);\n      break;\n    }\n\n    case 'pointer-disabled': {\n      const pointer = slider?.pointers[index];\n      if(!pointer) return;\n\n      pointer.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case 'aria-label': {\n      slider.setAriaLabel(index, newValue);\n      break;\n    }\n\n    case 'pointer-shape': {\n      if(slider.styles){\n        slider.styles.setPointerShape(index, newValue);\n      }\n      break;\n    }\n  }\n};", "import mainTemplate from '../templates/main.html.js'; // esbuild custom loader\nimport styles from './styles.pcss';\nimport { onAttributeChange } from '../domain/attributes-provider';\nimport { ISlider, ROUND_DEFAULT, Slider } from '../ui/slider';\nimport { TData, TStep } from '../types';\nimport { getBoolean } from '../domain/math-provider';\nimport * as TypeEnum from '../enums/type-enum';\nimport { getExternalCSSList } from '../domain/common-provider';\nimport { initPointerAPI, initPointerAPIs, initPointers } from '../domain/pointers-provider';\n\n/**\n * Usage: <toolcool-range-slider value=\"0\" min=\"0\" max=\"100\"></toolcool-range-slider>\n * Documentation: https://github.com/mzusin/toolcool-range-slider\n */\nclass TCRangeSlider extends HTMLElement {\n\n  public slider: ISlider | undefined;\n\n  private _externalCSSList: string[] | null = [];\n\n  private _observer: MutationObserver | null = null;\n\n  // -------------- APIs --------------------\n\n  public set step(_step: TStep) {\n    if(this.slider){\n      this.slider.setStep(_step);\n    }\n  }\n\n  public get step() {\n    return this.slider?.step;\n  }\n\n  public set disabled(_disabled: boolean) {\n    if(this.slider){\n      this.slider.disabled = _disabled;\n    }\n  }\n\n  public get disabled() {\n    return this.slider?.disabled ?? false;\n  }\n\n  public set data(_data: TData) {\n    this.slider?.setData(_data);\n  }\n\n  public get data() {\n    return this.slider?.data;\n  }\n\n  public set min(_min: number | string | undefined | null) {\n    this.slider?.setMin(_min);\n  }\n\n  public get min() {\n    return this.slider?.min;\n  }\n\n  public set max(_max: number | string | undefined | null) {\n    this.slider?.setMax(_max);\n  }\n\n  public get max() {\n    return this.slider?.max;\n  }\n\n  public set round(_round: number) {\n    if(!this.slider) return;\n    this.slider.round = _round;\n  }\n\n  public get round() {\n    return this.slider?.round ?? ROUND_DEFAULT;\n  }\n\n  public set type(_type: string | undefined) {\n    if(!this.slider) return;\n    this.slider.type = _type ?? TypeEnum.Horizontal;\n  }\n\n  public get type() {\n    return this.slider?.type || TypeEnum.Horizontal;\n  }\n\n  public set pointersOverlap(_pointersOverlap: boolean) {\n    if(!this.slider) return;\n    this.slider.pointersOverlap = _pointersOverlap;\n  }\n\n  public get pointersOverlap() {\n    return this.slider?.pointersOverlap ?? false;\n  }\n\n  public set pointersMinDistance(_pointersMinDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMinDistance = _pointersMinDistance;\n  }\n\n  public get pointersMinDistance() {\n    return this.slider?.pointersMinDistance ?? 0;\n  }\n\n  public set pointersMaxDistance(_pointersMaxDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMaxDistance = _pointersMaxDistance;\n  }\n\n  public get pointersMaxDistance() {\n    return this.slider?.pointersMaxDistance ?? Infinity;\n  }\n\n  public set theme(_theme: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.theme = _theme;\n  }\n\n  public get theme() {\n    return this.slider?.styles?.theme ?? null;\n  }\n\n  public set rtl(_rtl: boolean) {\n    if(!this.slider) return;\n    this.slider.rightToLeft = _rtl;\n  }\n\n  public get rtl() {\n    return this.slider?.rightToLeft ?? false;\n  }\n\n  public set btt(_btt: boolean) {\n    if(!this.slider) return;\n    this.slider.bottomToTop = _btt;\n  }\n\n  public get btt() {\n    return this.slider?.bottomToTop ?? false;\n  }\n\n  public set keyboardDisabled(_keyboardDisabled: boolean) {\n    if(!this.slider) return;\n    this.slider.keyboardDisabled = _keyboardDisabled;\n  }\n\n  public get keyboardDisabled() {\n    return this.slider?.keyboardDisabled ?? false;\n  }\n\n  public set mousewheelDisabled(_mousewheelDisabled: boolean) {\n    if(!this.slider) return;\n    this.slider.mousewheelDisabled = _mousewheelDisabled;\n  }\n\n  public get mousewheelDisabled() {\n    return this.slider?.mousewheelDisabled ?? false;\n  }\n\n  public set animateOnClick(_animateOnClick: string | boolean | undefined) {\n    if(!this.slider) return;\n    this.slider.animateOnClick = _animateOnClick;\n  }\n\n  public get animateOnClick() {\n    return this.slider?.animateOnClick;\n  }\n\n  public get rangeDragging(){\n    return this.slider?.rangeDragging ?? false;\n  }\n\n  public set rangeDragging(_rangeDragging: boolean | string | undefined | null) {\n    if(this.slider){\n      this.slider.rangeDragging = getBoolean(_rangeDragging);\n    }\n  }\n\n  public get externalCSSList() {\n    return this._externalCSSList;\n  }\n\n  public addPointer(value: number | string | undefined) {\n    if(!this.slider) return;\n\n    const index = this.slider?.addPointer(value);\n\n    initPointerAPI(this,\n      this.slider,\n      index,\n      `value${ index + 1 }`,\n      `ariaLabel${ index + 1 }`,\n      `pointerShape${ index + 1 }`,\n      `pointer${ index + 1 }Disabled`\n    );\n  }\n\n  public removePointer() {\n    if(!this.slider) return;\n    this.slider?.removePointer();\n  }\n\n  public addCSS(css: string) {\n    if(!this.shadowRoot) return;\n\n    const sheet = document.createElement('style')\n    sheet.textContent = css;\n    this.shadowRoot.appendChild(sheet);\n  }\n\n  // ----------------------------------------------\n\n  constructor() {\n    super();\n\n    this.attachShadow({\n      mode: 'open', // 'closed', 'open',\n    });\n  }\n\n  /**\n   * when the custom element connected to DOM\n   */\n  connectedCallback() {\n    if (!this.shadowRoot) return;\n\n    // get optional external CSS list\n    this._externalCSSList = getExternalCSSList(this);\n    this.shadowRoot.innerHTML = mainTemplate(styles, this._externalCSSList);\n\n    // init first pointer\n    const $pointer = this.shadowRoot?.querySelector('.pointer') as HTMLElement;\n    if(!$pointer) return;\n\n    // init the slider\n    const $slider = this.shadowRoot?.getElementById('range-slider') as HTMLElement;\n    if(!$slider) return;\n\n    const pointers = initPointers(this, $pointer);\n    this.slider = Slider(this, $slider, pointers);\n\n    initPointerAPIs(this, this.slider);\n\n    this._observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (!this.slider || mutation.type !== 'attributes') return;\n\n        const attrName = mutation.attributeName;\n        if(!attrName) return;\n\n        onAttributeChange(this.slider, attrName, this.getAttribute(attrName) ?? '');\n      });\n    });\n\n    this._observer.observe(this, {\n      attributes: true, //configure it to listen to attribute changes\n    });\n  }\n\n  /**\n   * when the custom element disconnected from DOM\n   */\n  disconnectedCallback() {\n    if(this._observer){\n      this._observer.disconnect();\n    }\n\n    if(!this.slider) return\n\n    this.slider.destroy();\n  }\n}\n\nexport default TCRangeSlider;\n", "import TCRangeSlider from './app/range-slider';\nimport { DynamicFields } from './types';\n\ntype RangeSlider = TCRangeSlider & HTMLElement & DynamicFields;\n\ndeclare global {\n  interface Window {\n    tcRangeSlider: typeof TCRangeSlider;\n  }\n}\n\nwindow.tcRangeSlider = TCRangeSlider;\n\n// register web components\nif (!customElements.get('toolcool-range-slider')) {\n  customElements.define('toolcool-range-slider', TCRangeSlider);\n}\n\nif (!customElements.get('tc-range-slider')) {\n  customElements.define('tc-range-slider', class extends TCRangeSlider{});\n}\n\nexport default RangeSlider;\n\n\n"],
  "mappings": "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",
  "names": ["main_html_default", "styles", "linkHrefs", "linkHref", "PointersOverlap", "PointersMinDistance", "PointersMaxDistance", "RangeDragging", "Data", "Min", "Max", "Step", "Round", "Type", "Theme", "RightToLeft", "BottomToTop", "Disabled", "KeyboardDisabled", "MousewheelDisabled", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "AnimateOnClick", "CSSLinks", "Vertical", "Horizontal", "convertRange", "min", "max", "a", "b", "x", "temp", "isNumber", "input", "getNumber", "defaultValue", "roundToStep", "num", "step", "setDecimalPlaces", "decimalPlaces", "coeff", "__pow", "getBoolean", "val", "sendPointerClickedEvent", "$component", "$pointer", "sendMouseDownEvent", "evt", "sendMouseUpEvent", "sendOnKeyDownEvent", "sendChangeEvent", "values", "transformed", "value", "detail", "i", "Pointer", "index", "percent", "arrowLeft", "arrowRight", "arrowUp", "arrowDown", "disabled", "updatePosition", "_percent", "_leftWall", "_rightWall", "_type", "_rightToLeft", "_bottomToTop", "oldValue", "percentPos", "isClicked", "$target", "setCallbacks", "_arrowLeft", "_arrowRight", "_arrowUp", "_arrowDown", "setDisabled", "_disabled", "setAttr", "key", "getAttr", "pointerKeyDown", "pointerClicked", "parseData", "dataString", "parts", "list", "allValuesAreNumbers", "part", "item", "findValueIndexInData", "data", "PanelFill", "$fill", "type", "percents", "rightToLeft", "bottomToTop", "oneOnly", "first", "last", "getAttributesByRegex", "regex", "parseValue", "map", "attr", "valueProp", "keyNum", "getExternalCSSList", "str", "cssList", "stylePropertiesList", "Styles", "$slider", "pointers", "theme", "pointerShapes", "stylesMap", "removeClassesStartWith", "prefix", "$element", "classList", "className", "removeClasses", "$pointers", "setTheme", "updatePointerShapes", "setPointerShape", "setPointerShapes", "getKey", "setStyle", "pointer", "$styleHolder", "getStyle", "cssVariableName", "attrName", "apiProperty", "cssVariableValue", "apiProperties", "propName", "ex", "PluginsManager", "requestUpdatePlugins", "setters", "getters", "plugins", "update", "plugin", "destroy", "onAttrChange", "_attrName", "_newValue", "defineSettersGetters", "initStyles", "_a", "$style", "pluginFunc", "MAX_VALUES_API", "initPointers", "$latestPointer", "$newPointer", "initPointerAPI", "slider", "ariaLabelProp", "pointerShapeProp", "pointerDisabledProp", "_b", "initPointerAPIs", "changePointersOrder", "isDesc", "$container", "MIN_DEFAULT", "MAX_DEFAULT", "ROUND_DEFAULT", "ANIMATE_ON_CLICK_DEFAULT", "Slider", "pointersList", "selectedPointer", "panelFill", "pluginsManager", "round", "pointersOverlap", "pointersMinDistance", "pointersMaxDistance", "rangeDragging", "rangeDraggingStart", "rangeDraggingDiff", "keyboardDisabled", "mousewheelDisabled", "animateOnClick", "ariaLabels", "onMouseDown", "onValueChange", "onMouseUp", "getActivePointer", "panelFillClicked", "isPanelFillClicked", "_dragPercent", "stepPercent", "getStepPercent", "isPanelClicked", "minDistance", "minDistancePointer", "distance", "getSelectedPointerIndex", "boxHeight", "boxTop", "mouseY", "boxWidth", "boxLeft", "mouseX", "firstPointer", "lastPointer", "firstSmallerThanMin", "lastGreaterThanMax", "setPositions", "foundIndex", "pointerMouseWheel", "scrollTop", "rightOrBottom", "shouldGoPrev", "goPrev", "goNext", "pointerIndex", "updatePlugins", "getPercents", "getValues", "getPointerElements", "getNumericMin", "getNumericMax", "getData", "getStep", "getRound", "getType", "getMin", "getMax", "isRightToLeft", "isBottomToTop", "isPointersOverlap", "getPointersMinDistance", "getPointersMaxDistance", "isRangeDraggingEnabled", "isDisabled", "isKeyboardDisabled", "isMousewheelDisabled", "getPointerLeftWall", "converted", "getPointerRightWall", "_step", "currentValue", "diff", "getTextValue", "getPointerMin", "getPointerMax", "getAriaLabel", "percentChanged", "valueText", "setAriaMinMax", "setAllPositions", "setMinMax", "_min", "_max", "setMin", "setMax", "setValues", "setValue", "_val", "setStep", "setPointersOverlap", "_pointersOverlap", "setPointersMinDistance", "_pointersMinDistance", "setPointersMaxDistance", "_pointersMaxDistance", "setKeyboardDisabled", "setMousewheelDisabled", "setData", "_data", "setType", "$box", "aria", "setRightToLeft", "setBottomToTop", "setRound", "_round", "setAnimateOnClick", "_animateOnClick", "setAriaLabel", "_ariaLabel", "setRangeDragging", "_rangeDragging", "initDisabled", "disabledList", "initAriaLabels", "ariaLabelsList", "addPointer", "len", "newPointer", "removePointer", "_keyboardDisabled", "_mousewheelDisabled", "onAttributeChange", "newValue", "found", "_cssVariableName", "_apiProperty", "_regex", "property", "TCRangeSlider", "__publicField", "_theme", "_c", "_rtl", "_btt", "css", "sheet", "styles_default", "mutations", "mutation", "range_slider_default"]
}
